{
  "articles": [
    {
      "path": "about.html",
      "title": "About this site",
      "description": "Some additional details about the website",
      "author": [],
      "contents": "\nThis course about basic graph theory is part of a bigger series on modeling opinion dynamics. TODO: LINK\n\n\n\n",
      "last_modified": "2022-05-09T18:10:44+02:00"
    },
    {
      "path": "average-path-length.html",
      "title": "Average Path Length",
      "author": [],
      "contents": "\nThe average path length of a network is the average length of the shortest path between any two nodes in the network. To compute the average path length, we first find the shortest path between all pairs of two nodes and then simply compute the arithmetic mean of these paths.\nLet’s see this in an example.\n\n\n\nTask\nWhen analyzing graphs, it is often helpful to have some basic knowledge of combinatorics. Can you figure out how many unique pairs of nodes there are for the network above without counting them by hand?\nThere are \\({n\\choose k}\\) possibilities to choose a unique subset of \\(k\\) elements in a set of \\(n\\) elements. In the case of our graph above, there are \\({5\\choose 2}\\) ways to select a pair of nodes.\n\\[\n{n\\choose k} = \\frac{n!}{k!(n-k)!}\n\\]\nThus, in this case:\n\\[\n{5\\choose 2} = \\frac{5!}{2!(5-2)!} = \\frac{5!}{2!3!} = \\frac{5 \\cdot 4}{1 \\cdot2} = 10\n\\]\nSo there are \\(10\\) ways to select a pair of nodes from the node set of the graph.\nLet’s list them out:\n\\[\n\\{1, 2\\}, \\{1, 3\\}, \\{1, 4\\}, \\{1, 5\\}, \\{2, 3\\}, \\{2, 4\\}, \\{2, 5\\}, \\{3, 4\\}, \\{3, 5\\}, \\{4, 5\\}\n\\]\nFor each of these, we now look for the shortest path between them.\n\\[\n|P_{min}(\\{1, 2\\})| = 3 \\\\\n|P_{min}(\\{1, 3\\})| = 1 \\\\\n|P_{min}(\\{1, 4\\})| = 2 \\\\\n|P_{min}(\\{1, 5\\})| = 1 \\\\\n|P_{min}(\\{2, 3\\})| = 3 \\\\\n|P_{min}(\\{2, 4\\})| = 1 \\\\\n|P_{min}(\\{2, 5\\})| = 2 \\\\\n|P_{min}(\\{3, 4\\})| = 2 \\\\\n|P_{min}(\\{3, 5\\})| = 1 \\\\\n|P_{min}(\\{4, 5\\})| = 1\n\\]\nNow, we simply take the arithmetic mean of these shortest path lengths:\n\\[\n\\overline{P_{min}} = \\frac{3 + 1 + 2 + 1 + 3 + 1 + 2 + 2 + 1 + 1}{10} = \\frac{16}{10} = 1.6\n\\]\n[ELABORATE] -> digraphs? -> weighted graphs? -> never need to do by hand because of computers\n\n\n\n",
      "last_modified": "2022-05-09T18:10:45+02:00"
    },
    {
      "path": "barabasi-albert-model.html",
      "title": "Preferential Attachment - The Barabási-Albert Model",
      "author": [],
      "contents": "\n\n\n\n",
      "last_modified": "2022-05-09T18:10:45+02:00"
    },
    {
      "path": "directed-graphs.html",
      "title": "Directed Graphs",
      "author": [],
      "contents": "\nThe graphs we’ve seen so far were undirected graphs. If nodes \\(A\\) and \\(B\\) are connected by an edge, \\(A\\) relates to \\(B\\) in the same way that \\(B\\) relates to \\(A\\). This setup makes sense when modeling symmetrical relationships. What could be situations where we want to be more specific about the nature of the relationship modeled by the network?\nConsider the social media site Facebook. Being friends with someone on Facebook is a relationship on equal footings. You are as much friends with the other person as they are with you. You get their updates in your timeline and they get your updates in theirs. If you were to model the exchange of information on Facebook, a graph with symmetrical relationships would be appropriate. Thus you would probably opt for an undirected graph.\nNow, in contrast, think about Twitter If you follow someone on Twitter, how is the relationship different from a friendship on Facebook? It is asymmetrical. You following another person doesn’t imply them following you. You are following them and they are followed by you. If you follow a celebrity, you get their updates on your feed, but they do not get yours in their feed. Thus, if we were to model Twitter as a network graph, we would model this relationship with a directed graph (often simply called Digraphs).\nWe draw a directed graph simply by putting an arrow head on one side of an edge to indicate the direction of the edge:\n\n\n\nWe already saw the notation of an undirected graph. The notation for directed graphs has a subtle difference. For the graph above, it is as follows:\n\\[\nG = (N, E) \\\\\nN = \\{1, 2, 3, 4, 5, 6, 7\\} \\\\\nE = \\{(1, 2), (1, 3), (2, 4), (2, 5), (3, 7), (6, 2), (6, 7), (7, 1)\\}\n\\]\nTask\nCan you spot the subtle difference?\nIn contrast to undirected graphs, where an edge is written as a set of nodes (i.e., the order doesn’t matter), in directed graphs, edges are written as tuples (the order does matter). Thus, an edge \\((a, b)\\) in a directed graph would mean that there is a directed edge from \\(a\\) to \\(b\\).\nTask\nTry to come up with three more networked systems that could be modeled with directed graphs.\n\n\n\n",
      "last_modified": "2022-05-09T18:10:46+02:00"
    },
    {
      "path": "erdos-renyi-model.html",
      "title": "The Erdös-Renyi Model",
      "author": [],
      "date": "`r Sys.Date()`",
      "contents": "\nThe Erdös-Renyi (ER) model is a random graph model. Sometimes, we are not interested in a particular graph, but rather a class of graphs.\nIf you had to come up with a random way of creating a graph, how would you do it?\nErdös and Renyi asked themselves the same thing. They came up with a model that is now known as the ER model.\nStart with a fixed number of nodes. Now take each pair of nodes and add an edge between them with probability \\(p\\).\nThere are several things to note about this model.\nFirst of all, what could you say about the density of that graph? If you create a sufficient number of random graphs this way, the average network density will be very close to \\(p\\).\nThere is another way of setting up the model. Start with a fixed number of nodes. Now take a fixed number of edges smaller or equal the number of possible edges. Put a random edge into the network until you have as many edges as you chose.\nThis way of setting up the network has the advantage that you can control the network density precisely. Every graph set up this way will have the same network density.\n\n\n\n",
      "last_modified": "2022-05-09T18:10:46+02:00"
    },
    {
      "path": "index.html",
      "title": "Basic Graph Theory",
      "description": "A brief introduction to graph and network theory\n",
      "author": [
        {
          "name": "Johannes Nakayama",
          "url": "https://example.com/"
        }
      ],
      "contents": "\nWhy graphs?\nWhat is a graph?\nTalking about graphs\nNetwork size and density\nNode degree\nAverage path length\nDirected graphs\nThe Erdos-Renyi model\nThe Watts-Strogatz model\nThe Barabasi-Albert model\nGraphs.jl\n\n\n\n",
      "last_modified": "2022-05-09T18:10:47+02:00"
    },
    {
      "path": "julia-graphs.html",
      "title": "Graphs.jl",
      "author": [],
      "contents": "\nTo learn the basics of graph theory, you need nothing more than pen and paper. However, once you move on to more complex analyses, you will need a computer. Graphs are so fundamental to such a diverse range of tasks, that virtually every programming language has a library that provides tools to create and analyze graphs.\nHere, we will have a quick look into Graphs.jl (Fairbanks et al. 2021), a Julia library for graphs.\nIf you have never worked with Julia before, we would recommend that you learn the basics of Julia first. [TODO: write basic julia tutorial]\nTo install the library, simply call:\n\n\n\n\nusing Pkg\nPkg.add(\"Graphs\")\nPkg.add(\"GraphPlots\")\nPkg.add(\"Compose\")\nPkg.add(\"GraphRecipes\")\nPkg.add(\"Plots\")\n\nTo load the library in your script, execute the following:\n\nusing Graphs\n\nThe using keyword brings the everything that the Graphs library exports into your global scope.\nNow that you have Graphs.jl installed and loaded, we can start working with it. Let’s begin by creating a simple graph and plotting:\n\ng = SimpleGraph(5)\n\nadd_edge!(g, 1, 2)\nadd_edge!(g, 3, 4)\nadd_edge!(g, 2, 4)\nadd_edge!(g, 1, 5)\nadd_edge!(g, 2, 5)\nadd_edge!(g, 4, 5)\n\nThis first simple snippet of Julia code already tells us a lot. First, incidentally, this is how we usually set up a Julia workflow in a script. You load the libraries at the top of the script and then move on to perform the task that the script is supposed to perform. In this case, we first constructed an empty undirected graph with 5 nodes (g = SimpleGraph(5)). Empty in this case means that the graph has no edges.\nThen we proceeded to add six edges to the graph (e.g., add_edge!(g, 1, 2) for “add an edge to g from node 1 to node 2”). The ! is a Julia convention for functions that manipulate an object in-place. It is important to keep this in mind. Here, it means that by simply calling the function, we modify the object g without having to assign it again.\nLet’s see whether everything went as planned:\n\nusing Plots, GraphRecipes\ngraphplot(g, curves = false, names = collect(1:nv(g)), markersize = 0.2)\n\n\nTask\nCheck if you can verify whether the graph in the plot is the correct visualization for the graph that we created before.\n\n\n\nFairbanks, James, Mathieu Besanȩon, Schölly Simon, Júlio Hoffiman, Nick Eubank, and Stefan Karpinski. 2021. “JuliaGraphs/Graphs.jl: An Optimized Graphs Package for the Julia Programming Language.” https://github.com/JuliaGraphs/Graphs.jl/.\n\n\n\n\n",
      "last_modified": "2022-05-09T18:11:23+02:00"
    },
    {
      "path": "network-size-and-density.html",
      "title": "Network Size and Density",
      "author": [],
      "date": "`r Sys.Date()`",
      "contents": "\nA low-hanging fruit is to first describe the size of a graph. We can count how many nodes and how many edges a graph has (node count and edge count).\nThese two metrics seem inoccuously simple, but they give us everything we need to calculate an interesting metric that gives us a more meaningful way of characterizing a graph: its density.\nLook at these two graphs:\n\n\n{\"x\":{\"links\":{\"source\":[1,1,0,9,1,10,1,11,9,11,1,7,10,14,1,7,12,13,0,9,11,12,7,8,0,1,14,2],\"target\":[7,9,10,10,11,11,12,12,14,14,2,2,2,2,3,3,3,3,4,4,4,4,5,5,6,6,6,6],\"value\":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\"colour\":[\"#666\",\"#666\",\"#666\",\"#666\",\"#666\",\"#666\",\"#666\",\"#666\",\"#666\",\"#666\",\"#666\",\"#666\",\"#666\",\"#666\",\"#666\",\"#666\",\"#666\",\"#666\",\"#666\",\"#666\",\"#666\",\"#666\",\"#666\",\"#666\",\"#666\",\"#666\",\"#666\",\"#666\"]},\"nodes\":{\"name\":[\"0\",\"1\",\"10\",\"11\",\"12\",\"13\",\"14\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"],\"group\":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\"nodesize\":[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]},\"options\":{\"NodeID\":\"name\",\"Group\":\"group\",\"colourScale\":\"d3.scaleOrdinal(['blue'])\",\"fontSize\":7,\"fontFamily\":\"serif\",\"clickTextSize\":17.5,\"linkDistance\":50,\"linkWidth\":\"'1.5px'.toString()\",\"charge\":-100,\"opacity\":0.6,\"zoom\":false,\"legend\":false,\"arrows\":false,\"nodesize\":true,\"radiusCalculation\":\"d.nodesize\",\"bounded\":false,\"opacityNoHover\":1,\"clickAction\":null}},\"evals\":[],\"jsHooks\":[]}\n{\"x\":{\"links\":{\"source\":[0,0,1,0,1,7,0,1,8,0,1,7,8,9,0,1,7,8,9,10,0,1,8,9,10,11,0,1,7,8,9,10,11,12,0,1,7,8,9,11,12,13,0,1,7,8,10,11,13,14,0,1,7,8,9,10,11,13,14,2,0,1,7,8,9,10,11,12,13,14,2,3,0,1,7,8,9,10,11,12,13,14,2,4,0,1,7,8,9,10,11,12,13,14,2,3,4,5],\"target\":[1,7,7,8,8,8,9,9,9,10,10,10,10,10,11,11,11,11,11,11,12,12,12,12,12,12,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6],\"value\":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\"colour},\"nodes\":{\"name\":[\"0\",\"1\",\"10\",\"11\",\"12\",\"13\",\"14\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"],\"group\":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\"nodesize\":[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]},\"options\":{\"NodeID\":\"name\",\"Group\":\"group\",\"colourScale\":\"d3.scaleOrdinal(['blue'])\",\"fontSize\":7,\"fontFamily\":\"serif\",\"clickTextSize\":17.5,\"linkDistance\":50,\"linkWidth\":\"'1.5px'.toString()\",\"charge\":-100,\"opacity\":0.6,\"zoom\":false,\"legend\":false,\"arrows\":false,\"nodesize\":true,\"radiusCalculation\":\"d.nodesize\",\"bounded\":false,\"opacityNoHover\":1,\"clickAction\":null}},\"evals\":[],\"jsHooks\":[]}\nDespite the fact that they both have the same number of nodes, the difference between the two just hits you right between the eyes. The second one is obviously more dense than the first one.\nThere is an easy way to quantify this. Network density is calculated by dividing the actual edge count by the number of possible edges, that is, the maximum number of edges possible in a graph with a given node count.\n\\[\ndensity(G) = \\frac{edges(G)}{{edges_{max}}(G)}\n\\]\nThe maximum number of edges would be present if there is an edge between each possible pair of nodes. A graph like that is called a complete graph.\nThe number of edges in a complete graph with \\(n\\) nodes is calculated as follows:\n\\[\n\\frac{n(n - 1)}{2}\n\\]\nTask\nCan you figure out why?\nTask\nCalculate the network density of the following graph:\n\n\n{\"x\":{\"links\":{\"source\":[0,0,1,2,2,3,0,1,2,3,1,5,0,2,4,0,1,2,7,4,6,8],\"target\":[2,3,3,3,4,4,5,5,5,5,6,6,7,7,7,8,8,8,8,9,9,9],\"value\":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\"colour\":[\"#666\",\"#666\",\"#666\",\"#666\",\"#666\",\"#666\",\"#666\",\"#666\",\"#666\",\"#666\",\"#666\",\"#666\",\"#666\",\"#666\",\"#666\",\"#666\",\"#666\",\"#666\",\"#666\",\"#666\",\"#666\",\"#666\"]},\"nodes\":{\"name\":[\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"],\"group\":[1,1,1,1,1,1,1,1,1,1],\"nodesize\":[8,8,8,8,8,8,8,8,8,8]},\"options\":{\"NodeID\":\"name\",\"Group\":\"group\",\"colourScale\":\"d3.scaleOrdinal(['blue'])\",\"fontSize\":7,\"fontFamily\":\"serif\",\"clickTextSize\":17.5,\"linkDistance\":50,\"linkWidth\":\"'1.5px'.toString()\",\"charge\":-100,\"opacity\":0.6,\"zoom\":false,\"legend\":false,\"arrows\":false,\"nodesize\":true,\"radiusCalculation\":\"d.nodesize\",\"bounded\":false,\"opacityNoHover\":1,\"clickAction\":null}},\"evals\":[],\"jsHooks\":[]}\n\n\n\n",
      "last_modified": "2022-05-09T18:11:23+02:00"
    },
    {
      "path": "node-degree.html",
      "title": "Node Degree",
      "author": [],
      "contents": "\nLet’s now take a look at vertices. What can we say about a vertex to describe it?\nWell, first there is the ID that we gave it, but that’s not very descriptive, is it?\nIn a simple graph like the ones that we just saw, there is one glaring thing that we can describe about a vertex: The number of edges that attach to it.\n\n\n{\"x\":{\"links\":{\"source\":[0,0,2,1,2,0,1,3,2,3,5],\"target\":[2,3,3,4,4,5,5,5,6,6,6],\"value\":[1,1,1,1,1,1,1,1,1,1,1],\"colour\":[\"#666\",\"#666\",\"#666\",\"#666\",\"#666\",\"#666\",\"#666\",\"#666\",\"#666\",\"#666\",\"#666\"]},\"nodes\":{\"name\":[\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\"],\"group\":[1,1,1,1,1,1,1],\"nodesize\":[8,8,8,8,8,8,8]},\"options\":{\"NodeID\":\"name\",\"Group\":\"group\",\"colourScale\":\"d3.scaleOrdinal(['blue'])\",\"fontSize\":7,\"fontFamily\":\"serif\",\"clickTextSize\":17.5,\"linkDistance\":50,\"linkWidth\":\"'1.5px'.toString()\",\"charge\":-100,\"opacity\":0.6,\"zoom\":false,\"legend\":false,\"arrows\":false,\"nodesize\":true,\"radiusCalculation\":\"d.nodesize\",\"bounded\":false,\"opacityNoHover\":1,\"clickAction\":null}},\"evals\":[],\"jsHooks\":[]}\nLook at vertex 2. It has 4 edges attached to it. Vertex 6 has 3 edges attached to it.\nWe can see that this number differs between vertices. In a small graph like this one, these differences seem insignificant, but you will see that they make a huge difference, especially if you look at larger graphs.\nFor instance, if you use a graph to model a social network (vertices are people and edges are relationships among them), can you see how much of a difference it would make if one person has 1000 acquaintances and another one has only 20?\nThe number of edges that attach to a node is called the node degree.\n\n\n\n",
      "last_modified": "2022-05-09T18:11:24+02:00"
    },
    {
      "path": "talking-about-graphs.html",
      "title": "Talking about graphs",
      "description": "Build a basic vocabulary to describe and characterize graphs.\n",
      "author": [],
      "contents": "\nBefore we go further into other types of graphs, let’s first build a basic vocabulary of how to talk about graphs. How can we quantify simple things about a graph to characterize certain aspects of it?\nTODO: list modules\n\n\n\n",
      "last_modified": "2022-05-09T18:11:25+02:00"
    },
    {
      "path": "watts-strogatz-model.html",
      "title": "The Watts-Strogatz Model",
      "author": [],
      "contents": "\nMany naturally-occurring networks have a peculiar property. Although they can be huge in terms of node count, the average path length between two nodes remains small. Really small in some cases.\nIf you take a social network, for instance, there are some famous experiments that show that any two nodes in the network are usually not separated by more than six degrees (the infamous six degrees of separation).\nIn pop science speak, this means that you are a mere six social connections away from the Queen of England.\nThe Erdös-Renyi model does not capture this property.\nAs it had been the predominant random graph model that was used for all kinds of purposes for some time, the field was ready for a new model.\nThe decisive innovation came from Duncan Watts and Steven Strogatz (Watts and Strogatz 1998), hence the name Watts-Strogatz model (WS model).\nStart with a regular ring lattice.\n\n\n\nThis is a regular ring lattice. There are two parameters that you already have to give the WS model to construct this lattice: \\(N\\) is the number of nodes and \\(k\\) is the mean node degree.\nIn the case of a regular ring lattice, the mean node degree is assumed to be an even number. In colloquial terms, you construct it by arranging the nodes in a circle and attaching each node to its \\(\\frac{k}{2}\\) neighbors on each side. That last one is a mouth full. Let’s look at it in detail.\nConsider the graph above again and look at node 1. It attaches to \\(2\\) and \\(3\\) on one side and to \\(10\\) and \\(9\\) on the other. Node \\(2\\) attaches to \\(3\\) and \\(4\\) on the one side and to \\(1\\) and \\(10\\) on the other. You can check this for every node and see that they all attach to \\(2\\) other nodes on each side. Hence the parameter \\(k\\), in this case, is \\(4\\).\nHere is an example with \\(k = 6\\):\n\n\n\nAnd for good measure, here is a lattice with \\(k = 2\\):\n\n\n\nLet’s return to the first graph:\n\n\n\nSuppose the above graph is the regular ring lattice you constructed. The WS model algorithm now proceeds as follows:\nFirst, there is yet another parameter that we need, \\(\\beta\\). Start with node 1 now and go through each edge that attaches to it. Reroute each edge to another node with probability \\(\\beta\\). The node to reroute to is drawn uniformly at random while avoiding self-loops. This means that you put all the other nodes (excluding the node in question, in this case node 1) in a bag and just draw a new node to attach the edge to.\nHere are some samples that were generated by this model:\n\\(\\beta = 0.3\\):\n\n\n\n\\(\\beta = 0.1\\)\n\n\n\n\\(\\beta = 0.9\\)\n\n\n\nTask\nCan you guess what happens if you set \\(\\beta = 1\\)? And what happens if you set \\(\\beta = 0\\)? Try to figure these two questions out before you move on.\nAs it indicates a probability value (the re-routing probability), there are two extreme cases to the \\(\\beta\\) parameter: \\(0\\) and \\(1\\) If \\(\\beta = 0\\), each edge is rerouted at random with a probability of \\(0\\), which is - not at all. This means that the resulting graph will just be a regular ring lattice with parameter \\(k\\). If \\(\\beta = 1\\), each edge is rerouted at random with a probability of \\(1\\), so all edges are rerouted randomly. This is equivalent to an Erdös-Renyi graph with \\(n_{nodes} = n\\) and \\(n_{edges} = |E|\\). TODO: use proper naming This leaves us with a very useful model: One where we can interpolate between a regular ring lattice and a random graph.\nTask\nImplement this model in Julia. (TODO: write basic julia or Graphs.jl tutorial)\n\n\n\nWatts, Duncan J, and Steven H Strogatz. 1998. “Collective Dynamics of ‘Small-World’networks.” Nature 393 (6684): 440–42.\n\n\n\n\n",
      "last_modified": "2022-05-09T18:11:27+02:00"
    },
    {
      "path": "what-is-a-graph.html",
      "title": "What is a graph?",
      "author": [],
      "contents": "\nThe simplest class of graphs is completely defined by a set of vertices and a set of edges. You can think of a vertex as a dot in space and an edge as a line connecting two dots. In this course, we will refer to vertices as nodes because frankly, it’s just simpler to say and type.\nLet’s consider a first example:\n\n\n{\"x\":{\"links\":{\"source\":[0,0,0,2,2,4,6,1,1],\"target\":[2,4,6,4,5,3,5,3,5],\"value\":[1,1,1,1,1,1,1,1,1],\"colour\":[\"#666\",\"#666\",\"#666\",\"#666\",\"#666\",\"#666\",\"#666\",\"#666\",\"#666\"]},\"nodes\":{\"name\":[\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\"],\"group\":[1,1,1,1,1,1,1],\"nodesize\":[8,8,8,8,8,8,8]},\"options\":{\"NodeID\":\"name\",\"Group\":\"group\",\"colourScale\":\"d3.scaleOrdinal(['blue'])\",\"fontSize\":7,\"fontFamily\":\"serif\",\"clickTextSize\":17.5,\"linkDistance\":50,\"linkWidth\":\"'1.5px'.toString()\",\"charge\":-100,\"opacity\":0.6,\"zoom\":false,\"legend\":false,\"arrows\":false,\"nodesize\":true,\"radiusCalculation\":\"d.nodesize\",\"bounded\":false,\"opacityNoHover\":1,\"clickAction\":null}},\"evals\":[],\"jsHooks\":[]}\nThis is a simple graph. As you can see, each node is labelled with a number which is how we usually keep track of nodes. Labeling nodes with numbers is not obligatory though. You can call your nodes whatever you want as long they are uniquely identifiable (which is why we call the node labels IDs). Sticking with the number labeling, though, we can define the set of nodes more formally by:\n\\[\nN = \\{1, 2, 3, 4, 5, 6, 7\\}\n\\]\nEdges are simply described as pairs of nodes: \\(\\{a, b\\}, \\text{where a, b } \\in N\\). Notice that we use the set notation for an edge here because the order of the nodes in an edge does not play a role (Yet! More on that later…). In this specific case, the set of edges is given by:\n\\[\nE = \\{\\{1, 3\\}, \\{1, 5\\}, \\{1, 7\\}, \\{2, 4\\}, \\{2, 6\\}, \\{3, 5\\}, \\{3, 6\\}, \\{4, 5\\}, \\{6, 7\\}\\}\n\\]\nIn summary, the graph is fully described by:\n\\[\nG = (N, E), \\text{where N is the set of nodes and E is the set of edges.}\n\\]\nNow that we have seen our first graph, let’s take a look at some other ones. This is also a graph:\n\n\n{\"x\":{\"links\":{\"source\":[0,1,2,3,4,5,0],\"target\":[1,2,3,4,5,6,6],\"value\":[1,1,1,1,1,1,1],\"colour\":[\"#666\",\"#666\",\"#666\",\"#666\",\"#666\",\"#666\",\"#666\"]},\"nodes\":{\"name\":[\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\"],\"group\":[1,1,1,1,1,1,1],\"nodesize\":[8,8,8,8,8,8,8]},\"options\":{\"NodeID\":\"name\",\"Group\":\"group\",\"colourScale\":\"d3.scaleOrdinal(['blue'])\",\"fontSize\":7,\"fontFamily\":\"serif\",\"clickTextSize\":17.5,\"linkDistance\":50,\"linkWidth\":\"'1.5px'.toString()\",\"charge\":-100,\"opacity\":0.6,\"zoom\":false,\"legend\":false,\"arrows\":false,\"nodesize\":true,\"radiusCalculation\":\"d.nodesize\",\"bounded\":false,\"opacityNoHover\":1,\"clickAction\":null}},\"evals\":[],\"jsHooks\":[]}\nObviously, it looks a little different.\nAnd this one looks yet a little different:\n\n\n{\"x\":{\"links\":{\"source\":[0,0,0,0,0,0],\"target\":[1,2,3,4,5,6],\"value\":[1,1,1,1,1,1],\"colour\":[\"#666\",\"#666\",\"#666\",\"#666\",\"#666\",\"#666\"]},\"nodes\":{\"name\":[\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\"],\"group\":[1,1,1,1,1,1,1],\"nodesize\":[8,8,8,8,8,8,8]},\"options\":{\"NodeID\":\"name\",\"Group\":\"group\",\"colourScale\":\"d3.scaleOrdinal(['blue'])\",\"fontSize\":7,\"fontFamily\":\"serif\",\"clickTextSize\":17.5,\"linkDistance\":50,\"linkWidth\":\"'1.5px'.toString()\",\"charge\":-100,\"opacity\":0.6,\"zoom\":false,\"legend\":false,\"arrows\":false,\"nodesize\":true,\"radiusCalculation\":\"d.nodesize\",\"bounded\":false,\"opacityNoHover\":1,\"clickAction\":null}},\"evals\":[],\"jsHooks\":[]}\nBut what differentiates these examples? How can we describe graphs in a way that gives us a vocabulary to characterize them in a meaningful way?\n\n\n\n",
      "last_modified": "2022-05-09T18:11:28+02:00"
    },
    {
      "path": "why-graphs.html",
      "title": "Why graphs?",
      "author": [],
      "contents": "\nAcross virtually all scientific domains, there are phenomena that can be described as networks. Things in nature just seem to like to connect.\nLet’s consider a couple of examples.\nA social network\n[GRAPHIC OF SOCIAL NETWORK]\nCan we find people that are very well connected? Can we identify cohesive communities in the network? Are there people who link two communities together? All these questions and many more can be addressed in a graph theoretic approach.\nThe electrical grid\n[GRAPHIC OF ELECTRICAL GRID]\nHow would the malfunctioning of one station affect the overall distribution of electricity? Could an outage at one station lead to outages in another region? Which stations could be considered high-risk targets of sabotage attacks?\nTraffic\n[GRAPHIC OF TRAFFIC NETWORK]\nWhat happens if an accident blocks an important crossing? Is there an enhanced risk of congestions? Are certain areas at a higher risk to experience congestions? How could building a new road aleviate traffic in an area that has a school?\nThere are literally countless more examples of what you could describe as a network.\nTask\nThink of three more things that have a networked structure.\nSo how would we model and analyze the examples above? That’s a question that we could decide ad hoc whenever we encounter the problem at hand. Luckily, we don’t have to. We can abstract away the essential structure of each of those and use a massive body of tools, metrics, and techniques that have been developed over centuries. That’s where graph theory come into play.\n[GRAPHIC OF ABSTRACTION PROCESS]\nGraphs are very versatile models for almost any kind relationship. They are “things” and how these “things” are connected to one another.\nThere are a lot of upsides to modeling relationships with graphs. First of all, graphs are very well formalized discrete mathematical structures. No matter the domain that we are modeling, we can profit from a large toolbox of mathematical analysis techniques and metrics.\nThere are a lot more specifications of graphs that can be used for more specific problems (for instance, what happens if the relationships, i.e., the edges, are directed, or what if we differentiate between the importance of edges and attach a weight to them?).\n\n\n\n",
      "last_modified": "2022-05-09T18:11:29+02:00"
    }
  ],
  "collections": []
}
